// Code generated by "strobfus" vv0.0.2000000002003; DO NOT EDIT.
// source: https://github.com/diegosz/strobfus

package main

// To generate this file deterministically, add the option '-seed foobar',
// 'foobar' being a seed from which the AES keys will derive.

import (
	"crypto/aes"
	"crypto/cipher"
	"fmt"
)

// a little comment
var hello string

var yolo = "" // poeut

var helloWorld = "" // hello\nworld

var arr = []string{}

var (
	str1 = "" // coucou
	arr1 = []string{}
	arr2 = []string{}
	arr3 = []string{}
)

func init() {
	var __privateKeyObfuscator = []byte{
		0x43, 0x7a, 0xdf, 0x52, 0x92, 0x92, 0x7c, 0x33, 0x78, 0xc3, 0x8b, 0xc3, 0x02, 0xb3, 0x69, 0x0d,
	}
	var __nonceObfuscator = []byte{
		0x68, 0xca, 0x73, 0xf8, 0x8e, 0xf3, 0x82, 0x45, 0x3a, 0x66, 0xcf, 0x12,
	}

	block, err := aes.NewCipher(__privateKeyObfuscator)
	if err != nil {
		panic(err)
	}
	aesgcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err)
	}
	{
		var __yolo = []byte{
			0x1b, 0x72, 0x6b, 0x86, 0x72, 0x42, 0x76, 0xb1, 0x83, 0x75, 0x2b, 0xbf, 0xe7, 0x26, 0xab, 0x36,
			0x7c, 0x08, 0xd9, 0x93, 0x3b,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __yolo, nil)
		if err != nil {
			panic(err)
		}
		yolo = string(plaintext)
	}
	{
		var __helloWorld = []byte{
			0x03, 0x78, 0x62, 0x9f, 0x69, 0x45, 0x77, 0x65, 0xb6, 0x54, 0xa3, 0x9a, 0xa4, 0xfe, 0x1b, 0x5f,
			0xd2, 0xbf, 0x85, 0xda, 0x6a, 0xce, 0x53, 0x9a, 0x20, 0x38, 0x46,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __helloWorld, nil)
		if err != nil {
			panic(err)
		}
		helloWorld = string(plaintext)
	}
	{
		var __arr = [][]byte{
			{
				0x0a, 0x9b, 0x9f, 0xf7, 0x88, 0xea, 0xf7, 0x81, 0xb3, 0x9d, 0xb8, 0x9f, 0x81, 0xe2, 0x3f, 0xf4,
				0xd1,
			},
			{
				0x09, 0x22, 0xc5, 0x09, 0x1c, 0x91, 0xbd, 0x5b, 0xa3, 0x57, 0x64, 0x07, 0xbe, 0x2f, 0xf6, 0xfc,
				0x68,
			},
		}
		ret := make([]string, 0, len(__arr))
		for _, v := range __arr {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		arr = ret
	}
	{
		var __str1 = []byte{
			0x08, 0x72, 0x7b, 0x90, 0x69, 0x3a, 0xc7, 0x88, 0xc1, 0x8a, 0xac, 0xf1, 0x31, 0x11, 0xc6, 0xc9,
			0x72, 0xd2, 0xd9, 0x21, 0x7f, 0x47,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __str1, nil)
		if err != nil {
			panic(err)
		}
		str1 = string(plaintext)
	}
	{
		var __arr1 = [][]byte{
			{
				0x0d, 0x72, 0x61, 0x73, 0xfa, 0x3e, 0xed, 0x55, 0x10, 0xfe, 0x37, 0x6d, 0x03, 0x7f, 0x1f, 0x0c,
				0x22, 0x51, 0x31,
			},
			{
				0x09, 0x7c, 0x7c, 0xe9, 0x42, 0x28, 0xb4, 0x4f, 0x56, 0x29, 0x84, 0x69, 0x3d, 0xb3, 0xbb, 0xa2,
				0xc1, 0xdd, 0x52,
			},
		}
		ret := make([]string, 0, len(__arr1))
		for _, v := range __arr1 {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		arr1 = ret
	}
	{
		var __arr2 = [][]byte{
			{
				0x03, 0x31, 0x1b, 0x0e, 0x65, 0x8a, 0x03, 0x87, 0xc1, 0xe9, 0xaf, 0x57, 0x3e, 0x83, 0x40, 0xcf,
				0xfc,
			},
			{
				0x0c, 0x2b, 0x2a, 0x0a, 0xa0, 0x1c, 0x62, 0x35, 0x92, 0x08, 0x01, 0xaf, 0xfe, 0x79, 0xad, 0xe5,
				0xa2,
			},
		}
		ret := make([]string, 0, len(__arr2))
		for _, v := range __arr2 {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		arr2 = ret
	}
	{
		var __arr3 = [][]byte{
			{
				0x1e, 0x73, 0x67, 0x82, 0x73, 0x2a, 0x20, 0x6f, 0xaa, 0x4c, 0xb5, 0x49, 0x03, 0x6c, 0x07, 0x05,
				0x61, 0x9a, 0x6b, 0xbf, 0x00, 0x94, 0xb3, 0x57, 0xee, 0xf6, 0x8f, 0x65,
			},
		}
		ret := make([]string, 0, len(__arr3))
		for _, v := range __arr3 {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		arr3 = ret
	}
	fmt.Println("This my init")
}
